[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
variable_probe_diameter: 18 #in mm
variable_probe_extra: 2 #in mm
variable_min_count_x: 3 #minimum number of probes
variable_min_count_y: 3 #minimum number of probes
 
 
; Do not change any of the existing values below.
variable_last_area_start_x: -1 ; Do not change
variable_last_area_start_y: -1 ; Do not change
variable_last_area_end_x: -1 ; Do not change
variable_last_area_end_y: -1 ; Do not change
 
gcode:
    CG28
    {% set probe_move = probe_diameter + probe_extra %}
  #first lets get the min max areas
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% if params.PRINT_MIN %}
        #get the max of the mins and the mins of the max to find the largest meshable area
        {% set print_min_x = [ bed_mesh_min[0] ,params.PRINT_MIN.split(",")[0] | float  ] | max  %}
        {% set print_min_y = [bed_mesh_min[1],params.PRINT_MIN.split(",")[1]|float] | max %}
        {% set print_max_x = [bed_mesh_max[0],params.PRINT_MAX.split(",")[0]|float] | min %}
        {% set print_max_y = [bed_mesh_max[1],params.PRINT_MAX.split(",")[1]|float]| min %}
    {% else %}
        { action_respond_info("USING EXCLUDE OBJECT") }
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set print_min_x = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
        {% set print_min_y = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
        {% set print_max_x = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
        {% set print_max_y = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
    {% endif %}
    { action_respond_info("x min: %f"  % print_min_x) }
    { action_respond_info("y min: %f"  % print_min_y) }
    { action_respond_info("x max: %f"  % print_max_x) }
    { action_respond_info("y max: %f"  % print_max_y) }
    {% set print_x_len = print_max_x - print_min_x %}
    {% set print_y_len = print_max_y - print_min_y %}
    {% set probe_count_x = printer.configfile.settings.bed_mesh.probe_count[0] %}
    {% set probe_count_y = printer.configfile.settings.bed_mesh.probe_count[1] %}
    #movement max is either the difference divided by the probe count or the defined movement travel
    {% set x_move = [ print_x_len / probe_count_x , probe_move] | max %}
    {% set y_move = [ print_y_len / probe_count_y , probe_move] | max %}
    #actual probe count is =MAX(FLOOR(print_x_len/x_move,1),probe_count_x)
    {% set probe_count_x =   [(print_x_len/x_move)|round(1,'floor'),min_count_x] | max %}
    {% set probe_count_y =   [(print_y_len/y_move)|round(1,'floor'),min_count_y] | max %}
 
    #ok now we do some more thingies based on the other dude's code
    { action_respond_info("mesh_min: %s,%s" % (print_min_x, print_min_x)) }
    { action_respond_info("mesh_max: %s,%s" % (print_max_x, print_max_y)) }
    { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }
 
    {% set x_min_bool =  last_area_start_x < 0 or print_min_x < last_area_start_x %}
    {% set x_max_bool =  last_area_end_x < 0 or print_max_x > last_area_end_x %}
    {% set y_min_bool =  last_area_start_y < 0 or print_min_y < last_area_start_y%}
    {% set y_max_bool =  last_area_end_y < 0 or print_max_y > last_area_end_y %}
    {% set do_bed_mesh = x_min_bool or y_min_bool or y_max_bool or x_max_bool %}
    {% if do_bed_mesh %}
 
        ; Set variables so they're available outside of macro
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}
 
        _BED_MESH_CALIBRATE mesh_min={print_min_x},{print_min_y} mesh_max={print_max_x},{print_max_y} probe_count={probe_count_x|int},{probe_count_y|int}
 
    {% endif %}